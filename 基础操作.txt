
安装git 软件
yum install git -y

创建git仓库文件并初始化
mkdir learngit
cd learngit/

git init
Initialized empty Git repository in /data1/learngit/.git/

ls -al
total 0
drwxr-xr-x  3 root root  18 Apr  7 15:13 .
drwxr-xr-x. 3 root root  22 Apr  7 15:13 ..
drwxr-xr-x  7 root root 119 Apr  7 15:13 .git
[root@k8snode02 learngit]# cd .git/
[root@k8snode02 .git]# ll
total 12
drwxr-xr-x 2 root root   6 Apr  7 15:13 branches
-rw-r--r-- 1 root root  92 Apr  7 15:13 config
-rw-r--r-- 1 root root  73 Apr  7 15:13 description
-rw-r--r-- 1 root root  23 Apr  7 15:13 HEAD
drwxr-xr-x 2 root root 242 Apr  7 15:13 hooks
drwxr-xr-x 2 root root  21 Apr  7 15:13 info
drwxr-xr-x 4 root root  30 Apr  7 15:13 objects
drwxr-xr-x 4 root root  31 Apr  7 15:13 refs



所有的版本控制系统，只能跟踪文本文件的改动（txt文档、网页、所有的程序代码）
创建readme.txt文档，输入代码内容
[root@k8snode02 .git]# vim readme.txt
git is a version control system.
git is free software.
~                                                                                                                                                                                                                
"readme.txt" [New] 2L, 55C written                                                              

添加文件至缓存区
git add readme.txt

提交至版本库
git commit -m "add readme" 
这里第一次提示输入用户名和邮箱：
*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'root@k8snode02.(none)')

[root@k8snode02 learngit]# git config --global user.email "liuxc083@example.com"
[root@k8snode02 learngit]# git config --global user.name "liuxc083"
[root@k8snode02 learngit]# 
[root@k8snode02 learngit]# git commit -m "add files readme.txt"
[master (root-commit) 2e6400e] add files readme.txt
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

批量添加文件后提交
[root@k8snode02 learngit]# ls
readme.txt
[root@k8snode02 learngit]# cp /etc/hosts .
[root@k8snode02 learngit]# cp /etc/resolv.conf .
[root@k8snode02 learngit]# 
[root@k8snode02 learngit]# ls
hosts  readme.txt  resolv.conf
[root@k8snode02 learngit]# git add hosts resolv.conf
[root@k8snode02 learngit]# git commit -m "add 2 files"
[master 223fdd8] add 2 files
 2 files changed, 10 insertions(+)
 create mode 100644 hosts
 create mode 100644 resolv.conf

修改文件后在未提交事务时查看状态，反馈文件状态（是否更改）
[root@k8snode02 learngit]# vim readme.txt 
git is a version control system.
git is free software.

hahha
~   
"readme.txt" 4L, 63C written                                                                    
[root@k8snode02 learngit]# 
[root@k8snode02 learngit]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

比对原文件可获取变化的内容
[root@k8snode02 learngit]# git diff readme.txt
diff --git a/readme.txt b/readme.txt
index 1668572..d752af7 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,4 @@
 git is a version control system.
 git is free software.
+
+hahha 

添加修改文件后查看状态，反馈文件状态未“to unstage（暂存区）”
[root@k8snode02 learngit]# git add readme.txt
[root@k8snode02 learngit]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   readme.txt
#

添加修改文件后提交事务完成后查看状态，反馈文件状态完成，工作区干净
[root@k8snode02 learngit]# git commit -m "add done!"
-bash: !": event not found 			###注意不能添加特殊字符
[root@k8snode02 learngit]# git commit -m "add done"
[master 41a4e41] add done
 1 file changed, 2 insertions(+)
[root@k8snode02 learngit]# git status
# On branch master
nothing to commit, working directory clean
[root@k8snode02 learngit]# 

版本回退操作
增加readme文本内容
[root@k8snode02 learngit]# vim readme.txt 
git is a version control system.
git is free software.
GPL.
hahha
~                                                                                                               
"readme.txt" 4L, 67C written                                                                    
[root@k8snode02 learngit]# 
[root@k8snode02 learngit]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
添加并提交
[root@k8snode02 learngit]# git add readme.txt 
[root@k8snode02 learngit]# git commit -m "add gpl"
[master 0222197] add gpl
 1 file changed, 1 insertion(+), 1 deletion(-)
查看记录日志
[root@k8snode02 learngit]# git log
commit 0222197276d8ce6fa7376ebad4f5f59fcf0eb938 		###commit 为版本号，回退时可以直接输入版本号前7、8位来快速回退至指定版本
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:55:00 2021 +0800

    add gpl 		###GPL版本

commit 41a4e4127fa197198b6f317b5041e6b421cf36a2
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:46:57 2021 +0800

    add done

commit 223fdd88a4ef0aa4d5b235bcaecb9e3360f0cef4
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:25:39 2021 +0800

    add 2 files

commit 2e6400eec60844522922854f011b9c2e44942144
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:23:07 2021 +0800

    add files readme.txt
回退至上一个版本，并查看日志和文件内容验证
[root@k8snode02 learngit]# git reset --hard HEAD^
HEAD is now at 41a4e41 add done
[root@k8snode02 learngit]# git log
commit 41a4e4127fa197198b6f317b5041e6b421cf36a2
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:46:57 2021 +0800

    add done

commit 223fdd88a4ef0aa4d5b235bcaecb9e3360f0cef4
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:25:39 2021 +0800

    add 2 files

commit 2e6400eec60844522922854f011b9c2e44942144
Author: liuxc083 <liuxc083@example.com>
Date:   Wed Apr 7 15:23:07 2021 +0800

    add files readme.txt
[root@k8snode02 learngit]# cat readme.txt 
git is a version control system.
git is free software.

hahha 

查看历史log记录
[root@k8snode02 learngit]# git reflog 
41a4e41 HEAD@{0}: reset: moving to HEAD^
0222197 HEAD@{1}: commit: add gpl
41a4e41 HEAD@{2}: commit: add done
223fdd8 HEAD@{3}: commit: add 2 files
2e6400e HEAD@{4}: commit (initial): add files readme.txt

小结：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


概念梳理：

前面把文件往Git版本库里添加的时候，是分两步执行的：

第一步执行git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步执行git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

可以简单理解为，需要提交的文件修改放到暂存区，然后，一次性提交暂存区的所有修改。



另外，在Git管理中，管理的是修改操作，而不是管理文件本身。
当用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但如果在工作区的第二次修改没有放入暂存区，那么，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交，第二次的修改不会被提交。

[root@localhost gitlearn]# vim readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello  #第一次修改

[root@localhost gitlearn]# git add readme.txt  #第一次添加至缓存区
[root@localhost gitlearn]# vim readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345  #第二次修改

[root@localhost gitlearn]# git commit -m "add hello"  #此时，提交的第一次修改
[master a80dc30] add hello
 1 file changed, 1 insertion(+)
[root@localhost gitlearn]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
以上状态：提示有内容为提交至缓存区
对比此时的修改
[root@localhost gitlearn]# git diff HEAD -- readme.txt
diff --git a/readme.txt b/readme.txt
index d18da3d..ad59a16 100644
--- a/readme.txt
+++ b/readme.txt
@@ -3,3 +3,4 @@ Git is powerful software.
 
 It Work!
 git hello  #第一次修改内容，已提交
+git 12345  #第二次修改内容，未提交
以上证明了，Git 管理的是修改操作而不是文件本身
建议，工作中多次修改内容，一次add 添加 并commit 提交



版本撤销

git有撤销修改的功能，主要执行git checkout -- file命令丢弃工作区的修改
版本撤销，分三类情况：
- 修改后还未添加至暂存区，撤销修改就回到和版本库一模一样的状态，执行命令git checkout -- file
- 已经添加到暂存区，先执行git reset HEAD file 撤销修改，回到添加到暂存区后的状态；再执行git checkout -- file 返回至修改前状态
- 已经添加并且提交至分支，执行版本回退操作

修改后还未添加至暂存区：
[root@localhost gitlearn]# vim readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345

zxcvadjvlkzjclkvja;;zlkjga
                                                         
[root@localhost gitlearn]# git status 
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

[root@localhost gitlearn]# git checkout -- readme.txt 
[root@localhost gitlearn]# more readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345


已经添加到暂存区：
[root@localhost gitlearn]# vim readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345

ELXJCIOALKGJ';
';OZDKJ

[root@localhost gitlearn]# git add readme.txt
[root@localhost gitlearn]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   readme.txt
#

[root@localhost gitlearn]# git reset HEAD readme.txt
Unstaged changes after reset:
M	readme.txt
[root@localhost gitlearn]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
[root@localhost gitlearn]# cat readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345

ELXJCIOALKGJ';
';OZDKJ 

[root@localhost gitlearn]# git checkout -- readme.txt
[root@localhost gitlearn]# cat readme.txt 
Git is a version control system.
Git is powerful software.

It Work!
git hello
git 12345



删除git文件
如果一个文件已经被提交到版本库，那么永远不用担心误删，但是要小心，只能恢复文件到最新版本，也就是说你会丢失其它版本内容。

执行系统删除命令rm -rf
[root@localhost gitlearn]# rm -rf hosts
[root@localhost gitlearn]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	deleted:    hosts
#
no changes added to commit (use "git add" and/or "git commit -a")

彻底删除还需要执行git rm 和 git commit操作 
[root@localhost gitlearn]# git rm hosts
rm 'hosts'
[root@localhost gitlearn]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	deleted:    hosts
#
[root@localhost gitlearn]# git commit -m "del hosts"
[master acba429] del hosts
 1 file changed, 3 deletions(-)
 delete mode 100644 hosts
[root@localhost gitlearn]# git status
# On branch master
nothing to commit, working directory clean


误删除的恢复
[root@localhost gitlearn]# rm -rf readme.txt 
[root@localhost gitlearn]# git status 
# On branch master
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	deleted:    readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
[root@localhost gitlearn]# 
[root@localhost gitlearn]# git checkout -- readme.txt

